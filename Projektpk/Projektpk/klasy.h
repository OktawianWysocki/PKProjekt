#ifndef ARX_H
#define ARX_H

#include <vector>

class Arx {
private:
    std::vector<double> wspolczynniki_a; // Wsp√≥≈Çczynniki wektora A
    std::vector<double> wspolczynniki_b; // Wsp√≥≈Çczynniki wektora B
    int opoznienie_k; // Op√≥≈∫nienie transportowe
    std::vector<double> bufor_wejscia;  // Bufor sygna≈Çu wej≈õciowego (u)
    std::vector<double> bufor_wyjscia; // Bufor sygna≈Çu wyj≈õciowego (y)

public:
    // Konstruktor klasy ARX
    Arx(const std::vector<double>& a, const std::vector<double>& b, int k);

    // Metoda wykonujƒÖca pojedynczy krok symulacji
    double wykonaj_krok(double u);
};

#endif // ARX_H


#ifndef PID_H
#define PID_H

class PID {
private:
    double kp;               // Wzmocnienie proporcjonalne
    double ti;               // Sta≈Ça ca≈Çkowania
    double td;               // Sta≈Ça r√≥≈ºniczkowania
    double suma_uchybow;     // Suma uchyb√≥w do oblicze≈Ñ sk≈Çadowej ca≈ÇkujƒÖcej
    double poprzedni_uchyb;  // Ostatnia warto≈õƒá uchybu (do r√≥≈ºniczkowania)

public:
    // Konstruktor
    PID(double kp, double ti, double td);

    // Funkcje obliczajƒÖce poszczeg√≥lne sk≈Çadowe
    double obliczP(double uchyb) const;        // Sk≈Çadowa proporcjonalna
    double obliczI(double uchyb);              // Sk≈Çadowa ca≈ÇkujƒÖca
    double obliczD(double uchyb);              // Sk≈Çadowa r√≥≈ºniczkujƒÖca

    // Funkcja obliczajƒÖca ca≈ÇkowitƒÖ warto≈õƒá sterowania
    double obliczSterowanie(double uchyb);

    // Resetowanie stanu kontrolera
    void reset();
};

#endif // PID_H

#ifndef SPRZERZENIE_H
#define SPRZERZENIE_H


class Sprzerzenie {
private:
    Arx* m_model;      // Obiekt regulacji (model ARX)
    PID* m_pid;        // Regulator PID
    double wartosc_zadana; // Warto≈õƒá zadana w(i)
    double poprzednie_y;   // Warto≈õƒá zmierzona (ùë¶ÃÇùëñ = ùë¶ùëñ‚àí1)

public:
    // Konstruktor
    Sprzerzenie(Arx* model, PID* pid, double wartosc_zadana);

    // Oblicza uchyb regulacji
    double obliczUchyb(double aktualne_y);

    // Wykonuje krok symulacji
    double wykonajKrok(double aktualne_y);
};

#endif // SPRZERZENIE_H
